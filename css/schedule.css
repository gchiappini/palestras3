main {
	display: grid;
	grid-template-areas:
		"header" /* CSS/base */
		"filter"
		"events"
		"pages"; /* CSS/base */
	grid-template-rows:
		min(70vw, 35rem)
		var(--grid-item)
		1fr
		calc(var(--grid-item) * 2);
	grid-auto-columns: minmax(0, min(90ch, 100vw - 4rem));
	justify-content: center;
}

#filter-container {
	grid-area: filter;
	justify-self: end;

	select {
		background-color: #fff;
	}
}

#events-container {
	grid-area: events;
}


/* ---- Card ---- */
.card-row {
	display: flex;

	&:not(:last-of-type) {
		margin-bottom: 2rem;
	}
}

.card-date {
	display: flex;
	position: absolute;
	z-index: 1; /* Prevent overlap by the card if current event */
	min-width: 8%;
	padding: 2rem;
	font-weight: bold;
	text-transform: uppercase;
	line-height: 1.3;
	pointer-events: none;

	@media (width >= 800px) {
		flex-direction: column;
		align-items: center;
		position: static;
		padding: 0;
	}
}

.card-day,
.card-month {
	font-size: 2.5rem;
}

.card-month {
	margin-left: 1rem;

	@media (width >= 800px) {
		margin: 0;
		font-size: 1.6rem;
	}
}

.card-main {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	padding-top: 8rem;
	background-color: rgb(30 30 30 / .6);

	@media (width >= 800px) {
		flex-wrap: nowrap;
		justify-content: center;
		padding: 0;
	}
}

.card-info {
	grid-area: info;
	padding: 2rem 2rem 2rem 3rem;
	pointer-events: none;
}

.card-aside {
	grid-area: side;
	display: flex;
	flex-direction: column;
	justify-content: space-around;
	align-items: center;
	padding-bottom: 3rem;

	@media (width >= 800px) {
		padding: 2rem;
	}
}

.card-button {
	background-color: var(--light);
	border: none;
	border-radius: 999px;
	color: #000;
	font-weight: bold;
	text-decoration: none;
	pointer-events: auto;
	cursor: pointer;
	transition: transform .2s;
}

@media (hover: hover) and (pointer: fine) { /* Ensure mouse states aren't triggered for mobile view */
	.card-button {
		&:hover {
			background-color: lch(from var(--light) calc(l - 20) c h);
			color: #fff;
		}

		&:active {
			outline: 0;
			transform: scale(.95);
		}
	}
}


/* ---- Info ---- */
.card-title {
	margin-bottom: 1rem;
	font-weight: bold;
	font-size: 2.5rem;
	text-align: center;
	text-wrap: balance;
	line-height: 1.3;
	word-break: break-word;
	hyphens: auto;

	@media (width >= 800px) {
		font-size: 2rem;
		text-align: left;
		text-wrap: wrap;
	}
}

.card-summary {
	display: flex;
	flex-direction: column;
	margin-bottom: 1rem;
}

.summary-text {
	display: -webkit-box;
	-webkit-box-orient: vertical;
	-webkit-line-clamp: 3;
	line-height: calc(2px + 2ex + 2px);
	overflow: hidden;
}

.summary-expand {
	align-self: flex-end;
	padding: 1rem;
	font-size: 1.2rem;

	@media (width >= 800px) {
		padding: .5rem 1rem;
	}
}

.card-tags {
	display: flex;
	flex-flow: row wrap;
}

.tag {
	margin: .5rem 1rem;
	padding: .5rem 1rem;
	background: linear-gradient(var(--theme), hsl(from var(--theme) h s 10)); /* Themes at CSS/tags */
	border-radius: 999px;
	font-weight: bold;
	font-size: 1.2rem;
	pointer-events: none;
}


/* ---- Aside ---- */
.portrait {
	display: none;

	@media (width >= 800px) {
		display: block;
		width: 120px;
		height: 120px;
		background: #ccc center 20%/120px no-repeat;
		border: 2px solid var(--light);
		border-radius: 50%;
	}
}

.card-aside > .card-button {
	padding: 1.6rem 3.2rem;

	@media (width >= 800px) {
		padding: 1rem 2rem;
	}
}


/* ---- Finished event ---- */
.finished-event {
	.card-date *,
	.card-info * {
		opacity: .5;
	}

	.tag,
	.portrait {
		--theme: #808080; /* Normalize */
		filter: grayscale(100%);
	}

	:where(.card-button) {
		background-color: #aaa;
	}
}


/* ---- Current event ---- */
.current-event {
	overflow: hidden;
	transform: translate(0%);

	> span {
		position: absolute;
	}

	> .animRight {
		inset: 0 auto auto 0;
		width: 100%;
		height: 2px;
		background: linear-gradient(to right, var(--dark), var(--light));
		animation: animRight 2s linear infinite;
	}

	> .animBottom {
		inset: 0 0 auto auto;
		width: 2px;
		height: 100%;
		background: linear-gradient(to bottom, var(--dark), var(--light));
		animation: animBottom 2s linear 1s infinite;
	}

	> .animLeft {
		inset: auto 0 0 auto;
		width: 100%;
		height: 2px;
		background: linear-gradient(to left, var(--dark), var(--light));
		animation: animLeft 2s linear infinite;
	}

	> .animTop {
		inset: auto auto 0 0;
		width: 2px;
		height: 100%;
		background: linear-gradient(to top, var(--dark), var(--light));
		animation: animTop 2s linear 1s infinite;
	}
}

@keyframes animRight {
	from {
		transform: translateX(-100%);
	}
	to {
		transform: translateX(100%);
	}
}

@keyframes animBottom {
	from {
		transform: translateY(-100%);
	}
	to {
		transform: translateY(100%);
	}
}

@keyframes animLeft {
	from {
		transform: translateX(100%);
	}
	to {
		transform: translateX(-100%);
	}
}

@keyframes animTop {
	from {
		transform: translateY(100%);
	}
	to {
		transform: translateY(-100%);
	}
}
